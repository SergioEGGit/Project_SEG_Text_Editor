//---------------------------------------------------------------------------

	#pragma hdrstop

//---------------------------------Librerias---------------------------------

	#include <iostream>
	#include <stdio.h>
	#include <conio.h>
	#include <string>
	#include <cstdlib>
	#include <fstream>
	#include <windows.h>
	#include "ListaDobleCaracteres.h"
	using namespace std;

//---------------------------------------------------------------------------

	#pragma package(smart_init)

//---------------------------------Métodos-----------------------------------

	void gotoxy(int x, int y)
	{
		COORD coord;
		coord.X = x;
		coord.Y = y;
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
	}

	void InsertarInicioLDC(ListaLDC &Cabeza, ListaLDC &Cola, string Caracter)
	{
		 ListaLDC aux = new(struct CaracteresLD);
		 aux -> Caracter = Caracter;

		 aux -> sgte = Cabeza;
		 aux -> ante = NULL;
		 if(Cabeza != NULL)
		 {
			 Cabeza -> ante = aux;
		 }
		 Cabeza = aux;
	}

	void InsertarFinalLDC(ListaLDC &Cabeza, ListaLDC &Cola, string Caracter)
	{
		ListaLDC aux = new(struct CaracteresLD);
		aux -> Caracter = Caracter;
		aux -> sgte = NULL;
		aux -> ante = NULL;

		if(Cabeza == NULL)
		{
			Cabeza = aux;
			Cola = aux;
		}
		else
		{
			Cola -> sgte = aux;
			aux -> ante = Cola;
			Cola = aux;
		}

	}

	void BorrarPrimeroLDC(ListaLDC &Cabeza)
	{
		ListaLDC aux = new(struct CaracteresLD);

		aux = Cabeza;
		Cabeza = Cabeza -> sgte;
		aux -> ante = NULL;
		Cabeza -> ante = NULL;
	}

	void BorrarEnmedioLDC(ListaLDC &Cabeza, int Posicion)
	{
		ListaLDC aux = new(struct CaracteresLD);
		aux = Cabeza;
		int contador = 0;

		if(aux != NULL)
		{
			while(aux != NULL)
			{
				 if(Posicion == contador - 1)
				 {

					 //cout<< aux -> Caracter;
                     break;
				 }
				 else
				 {
					 aux = aux -> sgte;
					 contador++;
				 }

			}
		}
	}

	void BorrarUltimoLDC(ListaLDC &Cola)
	{
		ListaLDC aux = new(struct CaracteresLD);

		aux = Cola;
		Cola = Cola -> ante;
		aux -> ante = NULL;
		Cola -> sgte = NULL;
	}

	string MostrarLDC(ListaLDC &Cabeza, int margenIzquierdo, int margenSuperior, int margenInferior, int margenDerecho)
	{
		ListaLDC aux = Cabeza;
		int contadorFila = 1;
		int contadorColumna = 0;
		string Coordenada = "";

		while(aux != NULL)
		{
			gotoxy(contadorColumna + margenIzquierdo, contadorFila + margenSuperior);clreol();

			if(aux -> Caracter != "ø")
			{
				cout<< aux -> Caracter;
			}
			else
			{
				contadorFila++;
				if(contadorFila > margenInferior)
				{
				   contadorFila--;
				}
				contadorColumna = -1;
			}
			aux = aux -> sgte;
			contadorColumna++;
			if(contadorColumna > margenDerecho - 2)
			{
				contadorColumna = 0;
				contadorFila++;
			}
		}
		gotoxy(contadorColumna + 1, contadorFila);

		Coordenada = to_string(contadorColumna) + ";" + to_string(contadorFila);

		return Coordenada;
	}

	void ReporteListaLDC(ListaLDC &Cabeza, ListaLDC &Cola)
	{
		ofstream Reporte1("Reporte1.dot");
		ListaLDC aux = Cola;
		Reporte1<< "digraph G" << endl;
		Reporte1<< "{" << endl;
		Reporte1<< "node [shape = box, fontname = Arial, color = blue];" <<endl;
		int contador = 0;
		string temp[10000];
		string Asc = "";
		string Desc = "";


		do
		{
			if(aux -> Caracter != "ø")
			{
				Reporte1<< "A" << contador << " [label = " <<"\"" << aux -> Caracter <<"\"]" <<endl;
				temp[contador] = "A" + to_string(contador);
				contador++;
			}
			aux = aux -> ante;
		}
		while(aux != NULL);

        for(int i = 0; i < contador; i++)
		{
			if(i < contador - 1)
			{
				Asc = Asc + temp[i] + "->";
				Desc = Desc + temp[contador - i - 1] + "->";
			}
			else
			{
				Desc = Desc + temp[contador - i - 1];
				Asc = Asc + temp[i];
			}
		}
		Desc = Desc + "->" + "null";
		Reporte1<< Asc <<endl;
		Reporte1<< " " <<endl;
		Reporte1<< Desc<<endl;
		Reporte1<< "}";
		Reporte1.close();

		//Generar Imagen
		system("C:\\\"Program Files (x86)\"\\Graphviz2.38\\bin\\dot.exe  -Tpng Reporte1.dot -o Reporte1.png");
		//Abrir Imagen
		system("C:\\Usac\\\"Estructuras De Datos\"\\EDD_1S2020_P1_201801628\\Win32\\Debug\\Reporte1.png &" );
	}

	void ReemplazarLDC(ListaLDC &Cabeza, ListaLDC &Primero, ListaLDC &Esp2, string PalabraReemplazar)
	{
		ListaLDC Esp = NULL;

		if(Primero == Cabeza)
		{

		}
		else
		{
			Esp = Primero -> ante;
		}

		for(int i = 0; i < PalabraReemplazar.length(); i++)
		{
			ListaLDC aux = new(struct CaracteresLD);
			aux -> Caracter = PalabraReemplazar[i];
			Esp -> sgte = aux;
			aux -> ante = Esp;
			aux -> sgte = Esp2;
			Esp2 -> ante = aux;
			Esp = aux;
		}
    }

	int BuscarRLCD(ListaLDC &Cabeza, ListaLDC &Cola, string PalabraBuscar, string PalabraReemplazar)
	{
		InsertarInicioLDC(Cabeza, Cola, " ");
		InsertarFinalLDC(Cabeza, Cola, " ");
		ListaLDC aux = Cabeza;
		ListaLDC PrimeroC;
		string PalabraEncontrada = "";
		int ContadorAF = 0;

		while(true)
		{
			if(aux -> Caracter == " " || aux -> Caracter == "ø")
			{
				if(PalabraEncontrada == PalabraBuscar)
				{
					ReemplazarLDC(Cabeza, PrimeroC, aux, PalabraReemplazar);
					ContadorAF++;
				}
				PalabraEncontrada = "";
			}
			else
			{
				if(PalabraEncontrada == "")
				{
					PrimeroC = aux;
				}
				PalabraEncontrada += aux -> Caracter;
			}
			aux = aux -> sgte;
			if(aux == NULL)
			{
				break;
            }
			Cola = aux;
		}

		BorrarPrimeroLDC(Cabeza);
	    BorrarUltimoLDC(Cola);

		return ContadorAF;
	}





